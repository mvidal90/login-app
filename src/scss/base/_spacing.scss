//
// Porting from Bootstrap 4

// Typical bootstrap 4 variables with our breakpoints and spacing
$grid-breakpoints: (
  xxxs: 0,
  xxs: 240,
  xs: 360,
  sm: 450,
  md: 1020,
  lg: 1366,
  xl: 1920,
) !default;

$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge(
  (
    0: 0,
    -3: (
        $spacer * -3,
      ),
    -15: (
        $spacer * -1.5,
      ),
    1: (
      $spacer * 0.25,
    ),
    2: (
      $spacer * 0.5,
    ),
    3: $spacer,
    4: (
      $spacer * 1.5,
    ),
    5: (
      $spacer * 3,
    ),
    6: (
      $spacer * 4,
    ),
    7: (
      $spacer * 6,
    ),
    8: (
      $spacer * 8,
    ),
  ),
  $spacers
);

// **************************** Ported functions ********************************
// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// **************************** Ported mixins ********************************
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

//
// ****************************** _spacing.scss ******************************
// https://github.com/twbs/bootstrap/blob/v4-dev/scss/utilities/_spacing.scss

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $spacers {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }
        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }
        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }
        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }
    }

    // Some special margin utils
    .m#{$infix}-auto {
      margin: auto !important;
    }
    .mt#{$infix}-auto,
    .my#{$infix}-auto {
      margin-top: auto !important;
    }
    .mr#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-right: auto !important;
    }
    .mb#{$infix}-auto,
    .my#{$infix}-auto {
      margin-bottom: auto !important;
    }
    .ml#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-left: auto !important;
    }
  }
}

@for $i from 1 through 200 {
  .mar-t-#{$i * 2} {
    margin-top: $i * 2px;
  }
}
@for $i from 1 through 48 {
  .mar-neg-t-#{$i * 2} {
    margin-top: $i * -2px;
  }
}
@for $i from 1 through 200 {
  .mar-b-#{$i * 2} {
    margin-bottom: $i * 2px;
  }
}
@for $i from 1 through 100 {
  .mar-r-#{$i * 2} {
    margin-right: $i * 2px;
  }
}
@for $i from 1 through 100 {
  .mar-l-#{$i * 2} {
    margin-left: $i * 2px;
  }
}
@for $i from 1 through 48 {
  .gap-#{$i * 2} {
    gap: $i * 2px;
  }
}
@for $i from 1 through 200 {
  .pad-t-#{$i * 2} {
    padding-top: $i * 2px;
  }
}
@for $i from 1 through 200 {
  .pad-b-#{$i * 2} {
    padding-bottom: $i * 2px;
  }
}
@for $i from 1 through 100 {
  .pad-l-#{$i * 2} {
    padding-left: $i * 2px;
  }
}
@for $i from 1 through 100 {
  .pad-r-#{$i * 2} {
    padding-right: $i * 2px;
  }
}
